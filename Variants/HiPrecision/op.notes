==Overview==

This is a look at doing various operations (rotate left, rotate right, 
and, or, xor) in bases which are not powers of 2.

==Rotate Left, Rotate Right==

It’s possible to do the equivalent of “rotate left” and “rotate right”
for any positive natural number base.

* A rotate is a multiplication by 2 (rotate left) or division by 2 (rotate
  right)

In base 16, here are the rotate left groups:

0 -> 0
1 -> 2 -> 4 -> 8 -> 1
3 -> 6 -> 12 -> 9 -> 3
5 -> 10 -> 5
7 -> 14 -> 13 -> 11 -> 7
15 -> 15

To do this:

n = n * 2
if(n > base) { n -= base; n++; }

With base 10, the same rule works (every operation is invertible):

0 -> 0
1 -> 2 -> 4 -> 8 -> 7 -> 5 -> 1
3 -> 6 -> 3
9 -> 9

However, we need a different rule for base 3:

0 -> 0
1 -> 2 -> 1

n = n * 2;
if(n > base) { n -= base; }

Base 5 also works with this second rule:

0 -> 0
1 -> 2 -> 4 -> 3 -> 1

Base 7:

0 -> 0
1 -> 2 -> 4 -> 1
3 -> 6 -> 5 -> 3

Base 9:

0 -> 0
1 -> 2 -> 4 -> 8 -> 7 -> 5 -> 1
3 -> 6 -> 3

---  

Observe that a generalized “rotate left” rule is not the same as
a generalized “rotate right” rule.  The rotate right rule is this:

* Divide by two.  
* If the resulting number is a fraction, add (base / 2) to the number
* Round the number down, if needed (only when the base is a power of 2)

==XOR==

XOR is both addition or subtraction; only in base two is addition 
and subtraction the same.

Here’s an old job interview question on how to swap two variables 
containing real numbers without a temp variable:

a = a - b
b = a + b
a = b - a

This also works with any integers.

The standard answer uses XOR:

a = a ^ b
b = a ^ b
a = b ^ a

But, since XOR is addition or subtractions base two, the first XOR is
a subtraction, the second XOR is addition, and the third XOR is
a subtraction.

So, to generalize XOR to any base we need to do the following:

* Decide whether XOR is really addition or subtraction
* Break down a given base in to its prime factors
* Perform addition (or subtraction) individually for each prime factor
  in an order we need to decide on

Point being, XOR for a prime base is simply addition or subtraction
modulo that base, which means we can not get the cryptographic benefits
of a standard AXR (Add, XOR, Rotate) construction in a prime base.

Is there a way of viewing XOR in say, base seven, which makes it 
different from addition or subtraction base seven?


